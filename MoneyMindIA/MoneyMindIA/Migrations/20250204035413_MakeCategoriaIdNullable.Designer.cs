// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoneyMindIA.Models.Data;

#nullable disable

namespace MoneyMindIA.Migrations
{
    [DbContext(typeof(MoneyMindDbContext))]
    [Migration("20250204035413_MakeCategoriaIdNullable")]
    partial class MakeCategoriaIdNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.Billetera", b =>
                {
                    b.Property<int>("BilleteraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BilleteraId"));

                    b.Property<decimal>("BalanceActual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("FechaVinculacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayPalAccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PayPalEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("BilleteraId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Billeteras");
                });

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.Categoria", b =>
                {
                    b.Property<int?>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CategoriaId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoriaId");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.ChatMensaje", b =>
                {
                    b.Property<int>("MensajeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MensajeId"));

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsUsuario")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("MensajeId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ChatMensajes");
                });

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.Meta", b =>
                {
                    b.Property<int>("MetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MetaId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("FechaCumplimiento")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MontoActual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("MontoObjetivo")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("MetaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Metas");
                });

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.Recomendacion", b =>
                {
                    b.Property<int>("RecomendacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecomendacionId"));

                    b.Property<DateTime>("FechaGeneracion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("RecomendacionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Recomendaciones");
                });

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.Transaccion", b =>
                {
                    b.Property<int>("TransaccionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransaccionId"));

                    b.Property<int>("BilleteraId")
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("TransaccionId");

                    b.HasIndex("BilleteraId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Transacciones");
                });

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EsRegistroNormal")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsuarioId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.Billetera", b =>
                {
                    b.HasOne("MoneyMindIA.Models.Entidades.Usuario", "Usuario")
                        .WithOne("Billetera")
                        .HasForeignKey("MoneyMindIA.Models.Entidades.Billetera", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.ChatMensaje", b =>
                {
                    b.HasOne("MoneyMindIA.Models.Entidades.Usuario", "Usuario")
                        .WithMany("ChatMensajes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.Meta", b =>
                {
                    b.HasOne("MoneyMindIA.Models.Entidades.Usuario", "Usuario")
                        .WithMany("Metas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.Recomendacion", b =>
                {
                    b.HasOne("MoneyMindIA.Models.Entidades.Usuario", "Usuario")
                        .WithMany("Recomendaciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.Transaccion", b =>
                {
                    b.HasOne("MoneyMindIA.Models.Entidades.Billetera", "Billetera")
                        .WithMany("Transacciones")
                        .HasForeignKey("BilleteraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyMindIA.Models.Entidades.Categoria", "Categoria")
                        .WithMany("Transacciones")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("MoneyMindIA.Models.Entidades.Usuario", null)
                        .WithMany("Transacciones")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Billetera");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.Billetera", b =>
                {
                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.Categoria", b =>
                {
                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("MoneyMindIA.Models.Entidades.Usuario", b =>
                {
                    b.Navigation("Billetera")
                        .IsRequired();

                    b.Navigation("ChatMensajes");

                    b.Navigation("Metas");

                    b.Navigation("Recomendaciones");

                    b.Navigation("Transacciones");
                });
#pragma warning restore 612, 618
        }
    }
}
